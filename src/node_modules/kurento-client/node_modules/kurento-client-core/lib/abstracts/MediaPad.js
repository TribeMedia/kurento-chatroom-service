/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var ChecktypeError = require('checktype').ChecktypeError;

var MediaObject = require('./MediaObject');

/**
 * @classdesc
 *  A {@link module:core/abstracts.MediaPad MediaPad} is an elementÂ´s interface with the outside world. The data streams flow from the {@link module:core/abstracts.MediaSource MediaSource} pad to another element's {@link module:core/abstracts.MediaSink MediaSink} pad.
 *
 * @abstract
 * @extends module:core/abstracts.MediaObject
 *
 * @constructor module:core/abstracts.MediaPad
 *
 * @param {external:String} id
 */
function MediaPad(id){
  MediaPad.super_.call(this, id);
};
inherits(MediaPad, MediaObject);

/**
 * The description for this pad.
 *
 * @alias module:core/abstracts.MediaPad#getMediaDescription
 *
 * @param {module:core/abstracts.MediaPad~getMediaDescriptionCallback} [callback]
 *
 * @return {external:Promise}
 */
MediaPad.prototype.getMediaDescription = function(callback){
  return this.invoke('getMediaDescription', callback);
};
/**
 * @callback module:core/abstracts.MediaPad~getMediaDescriptionCallback
 * @param {external:Error} error
 * @param {external:String} result
 */

/**
 * The {@link module:core/abstracts.MediaElement MediaElement} that encloses this pad
 *
 * @alias module:core/abstracts.MediaPad#getMediaElement
 *
 * @param {module:core/abstracts.MediaPad~getMediaElementCallback} [callback]
 *
 * @return {external:Promise}
 */
MediaPad.prototype.getMediaElement = function(callback){
  return this.invoke('getMediaElement', callback);
};
/**
 * @callback module:core/abstracts.MediaPad~getMediaElementCallback
 * @param {external:Error} error
 * @param {module:core/abstracts.MediaElement} result
 */

/**
 * Media that this pad accepts. One of {@link module:core/abstracts.MediaPad#MediaType.AUDIO}, {@link module:core/abstracts.MediaPad#MediaType.DATA} or {@link module:core/abstracts.MediaPad#MediaType.VIDEO}
 *
 * @alias module:core/abstracts.MediaPad#getMediaType
 *
 * @param {module:core/abstracts.MediaPad~getMediaTypeCallback} [callback]
 *
 * @return {external:Promise}
 */
MediaPad.prototype.getMediaType = function(callback){
  return this.invoke('getMediaType', callback);
};
/**
 * @callback module:core/abstracts.MediaPad~getMediaTypeCallback
 * @param {external:Error} error
 * @param {module:core/complexTypes.MediaType} result
 */

/**
 * @alias module:core/abstracts.MediaPad.constructorParams
 */
MediaPad.constructorParams = {};

/**
 * @alias module:core/abstracts.MediaPad.events
 *
 * @extend module:core/abstracts.MediaObject.events
 */
MediaPad.events = MediaObject.events;

module.exports = MediaPad;

MediaPad.check = function(key, value)
{
  if(!(value instanceof MediaPad))
    throw ChecktypeError(key, MediaPad, value);
};
