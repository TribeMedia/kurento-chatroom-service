/* Autogenerated with Kurento Idl */

/*
 * (C) Copyright 2013-2014 Kurento (http://kurento.org/)
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 */

var inherits = require('inherits');

var Promise = require('es6-promise').Promise;

var promiseCallback = require('promisecallback');

var ChecktypeError = require('checktype').ChecktypeError;

var MediaObject = require('./abstracts/MediaObject');

/**
 * Create a {@link module:core.MediaPipeline MediaPipeline}
 *
 * @classdesc
 *  A pipeline is a container for a collection of {@link module:core/abstracts.MediaElement MediaElements} and :rom:cls:`MediaMixers<MediaMixer>`. It offers the methods needed to control the creation and connection of elements inside a certain pipeline.
 *
 * @extends module:core/abstracts.MediaObject
 *
 * @constructor module:core.MediaPipeline
 *
 * @param {external:String} id
 */
function MediaPipeline(id){
  MediaPipeline.super_.call(this, id);
};
inherits(MediaPipeline, MediaObject);


/**
 * Create a new instance of a {module:core/abstract.MediaObject} attached to this {module:core.MediaPipeline}
 *
 * @param {external:String} type - Type of the {module:core/abstract.MediaObject}
 * @param {external:String[]} [params]
 * @param {module:core.MediaPipeline~createCallback} callback
 *
 * @return {external:Promise}
 */
MediaPipeline.prototype.create = function(type, params, callback){
  var self = this;

  // Fix optional parameters
  if(params instanceof Function){
    if(callback)
      throw new SyntaxError("Nothing can be defined after the callback");

    callback = params;
    params = undefined;
  };

  params = params || {};

  var promise = new Promise(function(resolve, reject)
  {
    params.mediaPipeline = self;

    self.emit('_create', type, params, function(error, result)
    {
      if(error) return reject(error);

      resolve(result);
    });
  });

  return promiseCallback(promise, callback);
};
/**
 * @callback core.MediaPipeline~createCallback
 * @param {external:Error} error
 * @param {module:core/abstract~MediaElement} result
 *  The created MediaElement
 */

/**
 * @alias module:core.MediaPipeline.constructorParams
 */
MediaPipeline.constructorParams = {};

/**
 * @alias module:core.MediaPipeline.events
 *
 * @extend module:core/abstracts.MediaObject.events
 */
MediaPipeline.events = MediaObject.events;

module.exports = MediaPipeline;

MediaPipeline.check = function(key, value)
{
  if(!(value instanceof MediaPipeline))
    throw ChecktypeError(key, MediaPipeline, value);
};
